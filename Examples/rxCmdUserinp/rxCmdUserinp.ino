#include <SPI.h>
#include "RF24.h"
#include "printf.h"   // must include this to use radio.printDetails();
#include "PENTEST_NRF.h"
#include "PENTEST_KEYBOARD.h"

//#define CE_PIN 8
//#define CSN_PIN 7
#define CE_PIN 9
#define CSN_PIN 10

///rx end MUST be an RFMICRO or RFLeo


#define MAX_LOAD_SIZE 16 


RF24 radio(CE_PIN, CSN_PIN);
PENTEST_NRF pentester(&radio);

byte payload[MAX_LOAD_SIZE];
int loadSize = MAX_LOAD_SIZE;

void setup() {
  printf_begin();          // This is for initializing printf that is used by printDetails()
  Serial.begin(115200);
  radio.begin(); 
  pentester.init();  //on receiving end, dont wait for serial 
  //radio.setPALevel(RF24_PA_HIGH);           // override the default PA_LOW pentester.init() sets
  radio.printDetails();                   // Dump the configuration of the rf unit for debugging
  //Serial.println("connecting................");
  radio.startListening();
}

void loop() {
  
  if (pentester.rxReliable(payload, loadSize)){
    radio.stopListening();
    Serial.println("Stopping to execute commands");
    Keyboard.begin();   //keyboard and serial do not always play nice
    delay(500);
    Serial.println(String((char*)payload));
    ///format for commands is in brackets, if you want it typed just type it inside the brackets, to open the command prompt type @1 for windows, @2 for linux, @3 for mac
    /// example payload to be typed into serial monitor: [@1 cd ./Documents]
    typeCommands(payload);
    Keyboard.end();
    
    //memset(payload, 0, MAX_LOAD_SIZE);
    radio.startListening();
  }
  pentester.checkForRadioFail();
}
