#include <SPI.h>
#include "RF24.h"   
#include "nrfPen.h"
#include "printf.h"

#define CE_PIN 8
#define CSN_PIN 7


//NOTE: this ONLY tests rf transmission, delays and for missed packets. It does not include the keyboard functionality 
//(when using the keyboard functionality on reciever side you cannot send packets fast, keyboard functions need delays and thus more time to execute)

RF24 radio(CE_PIN, CSN_PIN);

              const int loadSize = 16;
              byte inload[loadSize];
              byte outload[]= {"Hello there"} ; //random array of bytes for testing why not
              
nrfPen pentester(&radio);           

void setup(){
  Serial.begin(115200);
  
  radio.begin();
  printf_begin();     //need this to use radio.printDetails()
  pentester.init();   //bool argument waitForSerial (rfmicros skip serial print statements if false, but code hangs until serial monitor is open) DEFAULT TRUE
  radio.printDetails();       //node configuration, need  printf
  printf("\t........connecting........\n--------------------------------------------------------\n");
  printf("***PRESS 'T' TO BEGIN TRANSMITTING***\n");                     
}   

                                                                                               
void loop() {
  int myRole = pentester.checkRole(); //both start with role 0 (rx). When 'T' is entered in the serial monitor, that node will begin transmitting
      if (myRole==1){
        pentester.txReliable(outload);      //argument to txReliable and rxReliable is by reference so it must by an array or a pointer
        Serial.println("--------------------------------------------------------");
        delay(300);
      } else {
        pentester.rxReliable(inload);
        
      }
    pentester.checkForRadioFail();  //checks settings of radio to make sure it did not reset every 5 seconds
    pentester.getFailCount(50); //get and print the failCount every 50 transmissions. Note to not print it at all and simply return the fail count from this function, use arg -1  
      
}  
