#include <SPI.h>
#include "RF24.h"   
#include "PENTEST_NRF.h"
#include "printf.h"

//#define CE_PIN 8
//#define CSN_PIN 7
#define CE_PIN 9
#define CSN_PIN 10

//NOTE: this ONLY tests rf transmission, delays and for missed packets. It does not include the keyboard functionality 
//(when using the keyboard functionality on reciever side you cannot send packets fast, keyboard functions need delays and thus more time to execute)

RF24 radio(CE_PIN, CSN_PIN);

              const int Size = 16;
              const byte inload[Size];
              const byte outload[Size]; 
              int* loadSize = &Size;
              
PENTEST_NRF pentester(&radio);           

void setup(){
  Serial.begin(115200);
  radio.begin();
  printf_begin();     //need this to use radio.printDetails()
  
  //SET ONE NODE TO ROLE 0 (or don't set, 0 is default) and SET OTHER TO 1 as below 
  pentester.role = 0;       //for this example (since it uses the serial monitor for sending messages) we will not switch roles via serial monitor but here instead.     
  pentester.init();   //bool argument waitForSerial (rfmicros skip serial print statements if false, but code hangs until serial monitor is open) DEFAULT TRUE
  radio.printDetails();       //node configuration, need  printf
  printf("\t........connecting........\n--------------------------------------------------------\n");

}   

                                                                                               
void loop() {
  bool newTx = pentester.getInput(outload, loadSize);
      if (newTx){
        Serial.println((char*)outload);
        pentester.txRetryUntilSuccess(outload, loadSize, 5000);      //this will open a while loop that will not close until the payload goes thru, 
                                        ///timeout (second arg) is reached or you stop it's execution via the serial monitor with command 'S'
        Serial.println("--------------------------------------------------------");
        delay(300);
      } else {
            if (pentester.rxReliable(inload, loadSize)) {
              Serial.println("Printing inload");
              Serial.println((char*)inload);
              Serial.println(inload[1]);

            }
      }
    pentester.checkForRadioFail();  //checks settings of radio to make sure it did not reset every 5 seconds
    pentester.getFailCount(50); //get and print the failCount every 50 transmissions. Note to not print it at all and simply return the fail count from this function, use arg -1  
      
}  
