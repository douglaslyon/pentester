// minimum Eagle version required for this script

#require 4.1106




//
// gromero@felingeneering.com

//
//--------------------------------------------------------------------------------------

// parameters
string par_pad_shape = "ROUND";
string par_signal_name = "antenna";
int par_add_dimensions = 1;
int par_layer = 1;
int par_levels = 3;
real par_padding = 10; // mm
real par_width = 50; //mm
real par_height = 50 ; //mm
real par_trace_width = 8; // mils
real par_pad_diameter = 0.6; //mm
real par_pad_drill = 0.4; // mm
real par_offx = 0.0; //mm
real par_offy = 0.0; //mm
real par_connector_length = 0.0; //mm

// Eagle doesn't have user-defined structures and doesn't support recursivity,
// so we'll need to use several parallel stacks.
real stk_x1[];
real stk_y1[];
real stk_x2[];
real stk_y2[];
real stk_x3[];
real stk_y3[];
real stk_level[];
int  stk_elements;

// others

// are we running the script from within the board editor? (i.e. not the library editor)
int in_board_editor;
string cmd = "";
string solderpoint; // PAD or VIA depending if it's library editting or board
string signal_name;

//--------------------------------------------------------------------------------------

/* place a pad or via at a given location*/
void placePad(real x, real y) {
	string s;
	sprintf( s, "%s  (%4.2f %4.2f);\n", solderpoint , x+par_offx , y+par_offy);
	cmd += s;
}

// place a triangle on the board or library editor.
void placeTriangle(real x1, real y1, real x2, real y2, real x3, real y3) {
	string s;
	sprintf( s, "POLYGON %s(%4.2f %4.2f) (%4.2f %4.2f) (%4.2f %4.2f) (%4.2f %4.2f);\n",
			signal_name,
			x1+par_offx , y1+par_offy,
			x2+par_offx , y2+par_offy,
			x3+par_offx , y3+par_offy,
			x1+par_offx , y1+par_offy);
	cmd += s;

	cmd += "Change orphans on;\n";
}

// place a single segment of a wire between two points.
void placeWire(real x1, real y1, real x2, real y2) {
	string s;
	sprintf( s, "WIRE %s(%4.2f %4.2f) (%4.2f %4.2f);\n",
			signal_name,
			x1+par_offx , y1+par_offy,
			x2+par_offx , y2+par_offy);
	cmd += s;
}

//-----------------------

// setup several things like wire width, via shape and size, and current layer
void initEagle(void) {
	string s;
	sprintf( s, "GRID mil;\n");
	cmd += s;
	sprintf( s, "Change width %4.3f;\n", par_trace_width);
	cmd += s;
	sprintf( s, "GRID mm;\n");
	cmd += s;
	sprintf( s, "Change dia %4.2f;\n", par_pad_diameter);
	cmd += s;
	sprintf( s, "Change shape %s;\n", par_pad_shape);
	cmd += s;
	sprintf( s, "Change drill %4.2f;\n", par_pad_drill);
	cmd += s;
	sprintf( s, "Change layer %d;\n", par_layer);
	cmd += s;
	cmd += "Set WIRE_BEND 2;\n";
}

//-----------------------


// adds the connection (via/pad plus wire) to the lowest vertex of the antenna
void addConnection(void) {
	real orig_x = par_padding + par_width / 2.0;
	real orig_y = par_padding;
	
	real dy = par_pad_diameter / 2;

	placeWire(orig_x, orig_y, orig_x, orig_y + par_connector_length + dy);
	placePad(orig_x, orig_y);

}

// adds the rectangular border of the board in the 
// "Dimension" layer or in 'tDimension"
void addDimensions(void) {
	string s;

	real x=par_width + par_padding*2;
	real y=par_height + par_padding*2 + par_connector_length;
	if (in_board_editor) {
		sprintf( s, "Change layer 20;\n"); // Dimension
	} else {
		sprintf( s, "Change layer 51;\n"); // tDocu
	}
	cmd += s;

	placeWire(0,0, x,0);
	placeWire(x,0, x,y);
	placeWire(x,y, 0,y);
	placeWire(0,y, 0,0);

	sprintf( s, "Change layer %d;\n", par_layer);
	cmd += s;
}

// push a triangle into the triangles stack
void pushTriangle(int level, real x1, real y1, real x2, real y2, real x3, real y3) {
	stk_x1[stk_elements] =x1;
	stk_y1[stk_elements] =y1;
	stk_x2[stk_elements] =x2;
	stk_y2[stk_elements] =y2;
	stk_x3[stk_elements] =x3;
	stk_y3[stk_elements] =y3;
	stk_level[stk_elements] = level;
	stk_elements++;
}

// intitialize the triangles stack with a single triangle of the size of the whole
// antenna.
void initStack(void) {
	real orig_x = par_padding + par_width / 2.0;
	real orig_y = par_padding + par_connector_length;
	stk_elements = 0;
	pushTriangle(1,
			orig_x, orig_y,
			orig_x + par_width/2.0, orig_y + par_height,
			orig_x - par_width/2.0, orig_y + par_height);
}

// This function iterates popping and inserting triangles on the triangles stack.
// Every iteration, one triangle is popped from the stack. If it needs to be subdivided,
// then it is split into three triangles which are then pushed back into the stack.
// Otherwise the popped triangle is output to the board or library editor.
void buildAntenna(void) {
	real x1,x2,x3,x4,x5,x6;
	real y1,y2,y3,y4,y5,y6;
	int i;
	int level;

	initStack();

	while (stk_elements > 0) {
		i = --stk_elements;

		// if triangle is at the last level, we output it
		if (stk_level[i] >= par_levels) {
			placeTriangle(stk_x1[i], stk_y1[i], stk_x2[i], stk_y2[i], stk_x3[i], stk_y3[i]);
		} else {
			// split the triangle into three smaller triangles,
			// and push them into the stack
			level = stk_level[i];
	
			// corners of the original triangle
			x1 = stk_x1[i];
			y1 = stk_y1[i];
			
			x2 = stk_x2[i];
			y2 = stk_y2[i];
			
			x3 = stk_x3[i];
			y3 = stk_y3[i];

			// mid points of the sides of the triangles
			x4 = (x1 + x2) / 2;
			y4 = (y1 + y2) / 2;

			x5 = (x2 + x3) / 2;
			y5 = (y2 + y3) / 2;

			x6 = (x3 + x1) / 2;
			y6 = (y3 + y1) / 2;

			pushTriangle(level+1,x1,y1,x4,y4,x6,y6);
			pushTriangle(level+1,x4,y4,x2,y2,x5,y5);
			pushTriangle(level+1,x6,y6,x5,y5,x3,y3);
		}
	}
}

void doit(void) {
	cmd = "";
	
	// only polygons in board can belong to a signal
	if (in_board_editor) {
		signal_name = "'"+par_signal_name+"' ";
	} else {
		signal_name = "";
	}	

	// if we're in the editor, place the origin at 
	// the connection pad
	if (!in_board_editor) {
		real orig_x = par_padding + par_width / 2.0;
		real orig_y = par_padding;
		par_offx -= orig_x;
		par_offy -= orig_y;
	}
	


	initEagle();
	buildAntenna();
	addConnection();
	if (par_add_dimensions) addDimensions();
	exit (cmd);
}


// *** main ***

// decide whether we should use a via (board editor) or a pad (library editor)
if (board) board(B) { solderpoint = "VIA"; in_board_editor = 1; };
if (library) library(L) {solderpoint = "PAD"; in_board_editor = 0; };


// Show the config dialog
dlgDialog("Sierpinsky Antenna") {
	dlgHBoxLayout {
		dlgVBoxLayout {
			dlgGridLayout {
				dlgCell(1, 1) dlgLabel("levels");
				dlgCell(1, 2) dlgIntEdit(par_levels, 1, 10);

				dlgCell(2, 1) dlgLabel("connection length (mm)");
				dlgCell(2, 2) dlgRealEdit(par_connector_length, 0, 50.0);

				dlgCell(3, 1) dlgLabel("antenna width (mm)");
				dlgCell(3, 2) dlgRealEdit(par_width, 1.0,100.0);

				dlgCell(4, 1) dlgLabel("antenna height (mm)");
				dlgCell(4, 2) dlgRealEdit(par_height, 1.0,100.0);

				dlgCell(5, 1) dlgLabel("track width (mils)");
				dlgCell(5, 2) dlgRealEdit(par_trace_width, .1, 50.0);

				dlgCell(6, 1) dlgLabel("via/pad diameter (mm)");
				dlgCell(6, 2) dlgRealEdit(par_pad_diameter, .1, 10.0);

				dlgCell(7, 1) dlgLabel("via/pad drill (mm)");
				dlgCell(7, 2) dlgRealEdit(par_pad_drill, .1, 10.0);
			}
			dlgStretch(1);
		}
		dlgVBoxLayout {
			dlgGridLayout {
				if (in_board_editor) {
					dlgCell(1, 1) dlgLabel("board padding (mm)");
					dlgCell(1, 2) dlgRealEdit(par_padding, 1, 80.0);
					
					dlgCell(2, 1) dlgLabel("layer");
					dlgCell(2, 2) dlgIntEdit(par_layer, 1, 255);

					dlgCell(3, 1) dlgLabel("add board dimensions");
					dlgCell(3, 2) dlgCheckBox("", par_add_dimensions);
				} else {
					dlgCell(1, 1) dlgLabel("border padding (mm)");
					dlgCell(1, 2) dlgRealEdit(par_padding, 1, 80.0);

					dlgCell(2, 1) dlgLabel("add antenna border");
					dlgCell(2, 2) dlgCheckBox("", par_add_dimensions);
				}
			}
			dlgStretch(1);
		}
  }
  dlgHBoxLayout {
	 dlgPushButton("+&OK")	  { dlgAccept(); doit(); }
	 dlgPushButton("-&Cancel") { dlgReject(); exit(0); }
	 dlgStretch(1);
  }
};



