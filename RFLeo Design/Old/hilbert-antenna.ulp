// minimum Eagle version required for this script
#require 4.1106
#include "fractenna-utils.ulp"



//
// gromero@felingeneering.com
//
//--------------------------------------------------------------------------------------

// parameters
int par_add_dimensions = 1;
int par_levels = 3;

real par_padding = 10; // mm
real par_width = 50; //mm
real par_height = 50 ; //mm
real par_trace_width = 8; // mils
real par_pad_diameter = 0.6; //mm
real par_pad_drill = 0.4; // mm
real par_connector_length = 0.0; //mm

//--------------------------------------------------------------------------------------

int h_x;
int h_y;

//rotate/flip a quadrant appropriately
void hilbert_rot(int n, int rx, int ry) {
	int t;
	if (ry == 0) {
		if (rx == 1) {
			h_x = n-1 - h_x;
			h_y = n-1 - h_y;
		}

		//Swap x and y
		t  = h_x;
		h_x = h_y;
		h_y = t;
	}
}

//convert d to (x,y) (result is placed in h_x, and h_y)
void hilbert_d2xy(int n, int d) {
	int rx, ry, s, t=d;
	h_x = h_y = 0;
	for (s=1; s<n; s*=2) {
		rx = 1 & (t/2);
		ry = 1 & (t ^ rx);
		hilbert_rot(s, rx, ry);
		h_x += s * rx;
		h_y += s * ry;
		t /= 4;
	}
}

//-----------------------

void buildAntenna(void) {
	int i;
	int in_wire;

	int n = pow(2,par_levels);

	int tot_points = n*n;
	string s, elements;
	real x_scale = par_width / (n-1);
	real y_scale = par_height / (n-1);

	elements = "";

	in_wire = 0;
	for (i = 0; i < tot_points; i++) {
		hilbert_d2xy(n, i);
		elements += buildPoint(h_x * x_scale,h_y * y_scale + par_connector_length);
		in_wire++;
		if (in_wire == 20) {
			placeWireStrip(elements);
			elements = buildPoint(h_x * x_scale,h_y * y_scale + par_connector_length);
			in_wire = 1;
		}
	}
	if (in_wire > 1)
		placeWireStrip(elements);

}

void doit(void) {
	setPadding(par_padding);

	// if we're in the editor, place the origin at
	// the connection pad
	if (!in_board_editor) {
		setOrigin(0,0);
	} else {
		setOrigin(-par_padding, -par_padding); // corner of the board
	}

	initEagle(par_trace_width, par_pad_diameter, par_pad_drill);
	buildAntenna();

	addConnection(0,par_connector_length, 0, par_connector_length, 0, par_pad_diameter);
	if (par_add_dimensions) addDimensions(par_width, par_height + par_connector_length);
	exit (cmd);
}


// *** main ***

// decide whether we should use a via (board editor) or a pad (library editor)
if (board) board(B) { solderpoint = "VIA"; in_board_editor = 1; };
if (library) library(L) {solderpoint = "PAD"; in_board_editor = 0; };


// Show the config dialog
dlgDialog("Hilbert Curve Antenna") {
	dlgHBoxLayout {
		dlgVBoxLayout {
			dlgGridLayout {
				dlgCell(1, 1) dlgLabel("levels");
				dlgCell(1, 2) dlgIntEdit(par_levels, 1, 10);

				dlgCell(2, 1) dlgLabel("connection length (mm)");
				dlgCell(2, 2) dlgRealEdit(par_connector_length, 0, 100.0);

				dlgCell(3, 1) dlgLabel("antenna width (mm)");
				dlgCell(3, 2) dlgRealEdit(par_width, 1.0,100.0);

				dlgCell(4, 1) dlgLabel("antenna height (mm)");
				dlgCell(4, 2) dlgRealEdit(par_height, 1.0,100.0);

				dlgCell(5, 1) dlgLabel("track width (mils)");
				dlgCell(5, 2) dlgRealEdit(par_trace_width, .1, 50.0);

				dlgCell(6, 1) dlgLabel("via/pad diameter (mm)");
				dlgCell(6, 2) dlgRealEdit(par_pad_diameter, .1, 10.0);

				dlgCell(7, 1) dlgLabel("via/pad drill (mm)");
				dlgCell(7, 2) dlgRealEdit(par_pad_drill, .1, 10.0);
			}
			dlgStretch(1);
		}
		dlgVBoxLayout {
			dlgGridLayout {
				if (in_board_editor) {
					dlgCell(1, 1) dlgLabel("board padding (mm)");
					dlgCell(1, 2) dlgRealEdit(par_padding, 1, 80.0);
					
					dlgCell(2, 1) dlgLabel("layer");
					dlgCell(2, 2) dlgIntEdit(layer, 1, 255);

					dlgCell(3, 1) dlgLabel("add board dimensions");
					dlgCell(3, 2) dlgCheckBox("", par_add_dimensions);
				} else {
					dlgCell(1, 1) dlgLabel("border padding (mm)");
					dlgCell(1, 2) dlgRealEdit(par_padding, 1, 80.0);

					dlgCell(2, 1) dlgLabel("add antenna border");
					dlgCell(2, 2) dlgCheckBox("", par_add_dimensions);
				}
			}
			dlgStretch(1);
		}
  }
  dlgHBoxLayout {
	 dlgPushButton("+&OK")	  { dlgAccept(); doit(); }
	 dlgPushButton("-&Cancel") { dlgReject(); exit(0); }
	 dlgStretch(1);
  }
};


