// minimum Eagle version required for this script
#require 4.1106
#include "fractenna-utils.ulp"

//
// gromero@felingeneering.com
//
//--------------------------------------------------------------------------------------



// parameters
int par_add_dimensions = 1;
int par_levels = 3;

real par_padding = 10; // mm
real par_width = 50; //mm
real par_height = 50 ; //mm
real par_trace_width = 8; // mils
real par_pad_diameter = 0.6; //mm
real par_pad_drill = 0.4; // mm
real par_connector_length = 0.0; //mm
int par_multiscale = 0;

// Eagle doesn't have user-defined structures and doesn't support recursivity,
// so we'll need to use several parallel stacks.
real stk_x1[];
real stk_y1[];
real stk_x2[];
real stk_y2[];
real stk_x3[];
real stk_y3[];
real stk_level[];
int  stk_elements;

//--------------------------------------------------------------------------------------

// push a triangle into the triangles stack
void pushTriangle(int level, real x1, real y1, real x2, real y2, real x3, real y3) {
	stk_x1[stk_elements] =x1;
	stk_y1[stk_elements] =y1;
	stk_x2[stk_elements] =x2;
	stk_y2[stk_elements] =y2;
	stk_x3[stk_elements] =x3;
	stk_y3[stk_elements] =y3;
	stk_level[stk_elements] = level;
	stk_elements++;
}

// intitialize the triangles stack with a single triangle of the size of the whole
// antenna.
void initStack(void) {
	real orig_x = par_width / 2.0;
	real orig_y = par_connector_length;
	stk_elements = 0;
	pushTriangle(1,
			orig_x, orig_y,
			orig_x + par_width/2.0, orig_y + par_height,
			orig_x - par_width/2.0, orig_y + par_height);
}

// This function iterates popping and inserting triangles on the triangles stack.
// Every iteration, one triangle is popped from the stack. If it needs to be subdivided,
// then it is split into three triangles which are then pushed back into the stack.
// Otherwise the popped triangle is output to the board or library editor.
void buildAntenna(void) {
	real x1,x2,x3,x4,x5,x6;
	real y1,y2,y3,y4,y5,y6;
	int i;
	int level;

	initStack();

	while (stk_elements > 0) {
		i = --stk_elements;

		// if triangle is at the last level, we output it
		if (stk_level[i] >= par_levels) {
			placeTriangle(stk_x1[i], stk_y1[i], stk_x2[i], stk_y2[i], stk_x3[i], stk_y3[i]);
		} else {
			// split the triangle into three smaller triangles,
			// and push them into the stack
			level = stk_level[i];
	
			// corners of the original triangle
			x1 = stk_x1[i];
			y1 = stk_y1[i];
			
			x2 = stk_x2[i];
			y2 = stk_y2[i];
			
			x3 = stk_x3[i];
			y3 = stk_y3[i];

			// mid points of the sides of the triangles
			x4 = (x1 + x2) / 2;
			y4 = (y1 + y2) / 2;

			x5 = (x2 + x3) / 2;
			y5 = (y2 + y3) / 2;

			x6 = (x3 + x1) / 2;
			y6 = (y3 + y1) / 2;

			if (par_multiscale) {
				placeTriangle(x1,y1,x4,y4,x6,y6);
			} else {
				pushTriangle(level+1,x1,y1,x4,y4,x6,y6);
			}
			pushTriangle(level+1,x4,y4,x2,y2,x5,y5);
			pushTriangle(level+1,x6,y6,x5,y5,x3,y3);
		}
	}
}

void doit(void) {
	setPadding(par_padding);

	real orig_x = par_width / 2.0;
	real orig_y = par_connector_length;

	// if we're in the editor, place the origin at
	// the connection pad
	if (!in_board_editor) {
		setOrigin(orig_x, orig_y - par_connector_length);
	} else {
		setOrigin(-par_padding, -par_padding); // corner of the board
	}
	
	initEagle(par_trace_width, par_pad_diameter, par_pad_drill);
	buildAntenna();
	addConnection(orig_x, orig_y, 0, par_connector_length, 1.0, par_pad_diameter);
	if (par_add_dimensions) addDimensions(par_width, par_height + par_connector_length);

	cmd += "ratsnest;";

	exit (cmd);
}


// *** main ***


// Show the config dialog
dlgDialog("Sierpinsky Antenna") {
	dlgHBoxLayout {
		dlgVBoxLayout {
			dlgGridLayout {
				dlgCell(1, 1) dlgLabel("levels");
				dlgCell(1, 2) dlgIntEdit(par_levels, 1, 10);

				dlgCell(2, 1) dlgLabel("connection length (mm)");
				dlgCell(2, 2) dlgRealEdit(par_connector_length, 0, 100.0);

				dlgCell(3, 1) dlgLabel("antenna width (mm)");
				dlgCell(3, 2) dlgRealEdit(par_width, 1.0,100.0);

				dlgCell(4, 1) dlgLabel("antenna height (mm)");
				dlgCell(4, 2) dlgRealEdit(par_height, 1.0,100.0);

				dlgCell(5, 1) dlgLabel("track width (mils)");
				dlgCell(5, 2) dlgRealEdit(par_trace_width, .1, 50.0);

				dlgCell(6, 1) dlgLabel("via/pad diameter (mm)");
				dlgCell(6, 2) dlgRealEdit(par_pad_diameter, .1, 10.0);

				dlgCell(7, 1) dlgLabel("via/pad drill (mm)");
				dlgCell(7, 2) dlgRealEdit(par_pad_drill, .1, 10.0);
			}
			dlgStretch(1);
		}
		dlgVBoxLayout {
			dlgGridLayout {
				if (in_board_editor) {
					dlgCell(1, 1) dlgLabel("board padding (mm)");
					dlgCell(1, 2) dlgRealEdit(par_padding, 1, 80.0);
					
					dlgCell(2, 1) dlgLabel("layer");
					dlgCell(2, 2) dlgIntEdit(layer, 1, 255);

					dlgCell(3, 1) dlgLabel("add board dimensions");
					dlgCell(3, 2) dlgCheckBox("", par_add_dimensions);

					dlgCell(4, 1) dlgLabel("multi-scale");
					dlgCell(4, 2) dlgCheckBox("", par_multiscale);
				} else {
					dlgCell(1, 1) dlgLabel("border padding (mm)");
					dlgCell(1, 2) dlgRealEdit(par_padding, 1, 80.0);

					dlgCell(2, 1) dlgLabel("add antenna border");
					dlgCell(2, 2) dlgCheckBox("", par_add_dimensions);

					dlgCell(3, 1) dlgLabel("multi-scale");
					dlgCell(3, 2) dlgCheckBox("", par_multiscale);
				}
			}
			dlgStretch(1);
		}
  }
  dlgHBoxLayout {
	 dlgPushButton("+&OK")	  { dlgAccept(); doit(); }
	 dlgPushButton("-&Cancel") { dlgReject(); exit(0); }
	 dlgStretch(1);
  }
};



