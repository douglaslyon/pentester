// minimum Eagle version required for this script
#require 4.1106



//
// gromero@felingeneering.com
//
//--------------------------------------------------------------------------------------

// parameters
string par_pad_shape = "ROUND";
string par_signal_name = "antenna";
int par_add_dimensions = 1;
int par_layer = 1;
int par_levels = 3;
real par_padding = 10; // mm
real par_width = 50; //mm
real par_height = 50 ; //mm
real par_trace_width = 8; // mils
real par_pad_diameter = 0.6; //mm
real par_pad_drill = 0.4; // mm
real par_offx = 0.0; //mm
real par_offy = 0.0; //mm
real par_connector_length = 0.0; //mm

// others
// are we running the script from within the board editor? (i.e. not the library editor)
int in_board_editor;
string cmd = "";
string solderpoint; // PAD or VIA depending if it's library editting or board
string signal_name;

//--------------------------------------------------------------------------------------

/* place a pad or via at a given location*/
void placePad(real x, real y) {
	string s;
	sprintf( s, "%s  (%4.2f %4.2f);\n", solderpoint , x+par_offx , y+par_offy);
	cmd += s;
}

// place a triangle on the board or library editor.
void placeTriangle(real x1, real y1, real x2, real y2, real x3, real y3) {
	string s;
	sprintf( s, "POLYGON %s(%4.2f %4.2f) (%4.2f %4.2f) (%4.2f %4.2f) (%4.2f %4.2f);\n",
			signal_name,
			x1+par_offx , y1+par_offy,
			x2+par_offx , y2+par_offy,
			x3+par_offx , y3+par_offy,
			x1+par_offx , y1+par_offy);
	cmd += s;

	cmd += "Change orphans on;\n";
}

// place a single segment of a wire between two points.
void placeWire(real x1, real y1, real x2, real y2) {
	string s;
	sprintf( s, "WIRE %s(%4.2f %4.2f) (%4.2f %4.2f);\n",
			signal_name,
			x1+par_offx , y1+par_offy,
			x2+par_offx , y2+par_offy);
	cmd += s;
}

void placeWireStrip(string elements) {
	string s;
	int i;

	sprintf( s, "WIRE %s",signal_name);
	cmd += s;
	cmd += elements;
	cmd += ";\n";
}

//-----------------------

// setup several things like wire width, via shape and size, and current layer
void initEagle(void) {
	string s;
	sprintf( s, "GRID mil;\n");
	cmd += s;
	sprintf( s, "Change width %4.3f;\n", par_trace_width);
	cmd += s;
	sprintf( s, "GRID mm;\n");
	cmd += s;
	sprintf( s, "Change dia %4.2f;\n", par_pad_diameter);
	cmd += s;
	sprintf( s, "Change shape %s;\n", par_pad_shape);
	cmd += s;
	sprintf( s, "Change drill %4.2f;\n", par_pad_drill);
	cmd += s;
	sprintf( s, "Change layer %d;\n", par_layer);
	cmd += s;
	cmd += "Set WIRE_BEND 2;\n";
}

//-----------------------


// adds the connection (via/pad plus wire) to the lowest vertex of the antenna
void addConnection(void) {
	real orig_x = par_padding;
	real orig_y = par_padding;
	
	placeWire(orig_x, orig_y, orig_x, orig_y + par_connector_length);
	placePad(orig_x, orig_y);

}

// adds the rectangular border of the board in the 
// "Dimension" layer or in 'tDocu"
void addDimensions(void) {
	string s;

	real x=par_width + par_padding*2;
	real y=par_height + par_padding*2 + par_connector_length;
	if (in_board_editor) {
		sprintf( s, "Change layer 20;\n"); // Dimension
	} else {
		sprintf( s, "Change layer 51;\n"); // tDocu
	}
	cmd += s;

	placeWire(0,0, x,0);
	placeWire(x,0, x,y);
	placeWire(x,y, 0,y);
	placeWire(0,y, 0,0);

	sprintf( s, "Change layer %d;\n", par_layer);
	cmd += s;
}

//-----------------------

int h_x;
int h_y;

//rotate/flip a quadrant appropriately
void hilbert_rot(int n, int rx, int ry) {
	int t;
	if (ry == 0) {
		if (rx == 1) {
			h_x = n-1 - h_x;
			h_y = n-1 - h_y;
		}

		//Swap x and y
		t  = h_x;
		h_x = h_y;
		h_y = t;
	}
}

//convert d to (x,y) (result is placed in h_x, and h_y)
void hilbert_d2xy(int n, int d) {
	int rx, ry, s, t=d;
	h_x = h_y = 0;
	for (s=1; s<n; s*=2) {
		rx = 1 & (t/2);
		ry = 1 & (t ^ rx);
		hilbert_rot(s, rx, ry);
		h_x += s * rx;
		h_y += s * ry;
		t /= 4;
	}
}

//-----------------------

void buildAntenna(void) {
	int i;
	int in_wire;

	int n = pow(2,par_levels);


	int tot_points = n*n;
	string s, elements;
	real x_scale = par_width / (n-1);
	real y_scale = par_height / (n-1);

	elements = "";

	
	in_wire = 0;
	for (i = 0; i < tot_points; i++) {
		hilbert_d2xy(n, i);
		sprintf(s, "(%4.2f %4.2f) ",h_x * x_scale + par_padding+par_offx,h_y * y_scale + par_padding + par_connector_length+par_offy);
		elements += s;
		in_wire++;
		if (in_wire == 20) {
			placeWireStrip(elements);
			elements = s;
			in_wire = 1;
		}
	}
	if (in_wire > 1)
		placeWireStrip(elements);

}

void doit(void) {
	cmd = "";
	
	// only polygons in board can belong to a signal
	if (in_board_editor) {
		signal_name = "'"+par_signal_name+"' ";
	} else {
		signal_name = "";
	}	

	// if we're in the editor, place the origin at 
	// the connection pad
	if (!in_board_editor) {
		par_offx -= par_padding;
		par_offy -= par_padding;
	}

	initEagle();
	buildAntenna();
	addConnection();

	if (par_add_dimensions) addDimensions();
	exit (cmd);
}


// *** main ***

// decide whether we should use a via (board editor) or a pad (library editor)
if (board) board(B) { solderpoint = "VIA"; in_board_editor = 1; };
if (library) library(L) {solderpoint = "PAD"; in_board_editor = 0; };


// Show the config dialog
dlgDialog("Hilbert Curve Antenna") {
	dlgHBoxLayout {
		dlgVBoxLayout {
			dlgGridLayout {
				dlgCell(1, 1) dlgLabel("levels");
				dlgCell(1, 2) dlgIntEdit(par_levels, 1, 10);

				dlgCell(2, 1) dlgLabel("connection length (mm)");
				dlgCell(2, 2) dlgRealEdit(par_connector_length, 0, 50.0);

				dlgCell(3, 1) dlgLabel("antenna width (mm)");
				dlgCell(3, 2) dlgRealEdit(par_width, 1.0,100.0);

				dlgCell(4, 1) dlgLabel("antenna height (mm)");
				dlgCell(4, 2) dlgRealEdit(par_height, 1.0,100.0);

				dlgCell(5, 1) dlgLabel("track width (mils)");
				dlgCell(5, 2) dlgRealEdit(par_trace_width, .1, 50.0);

				dlgCell(6, 1) dlgLabel("via/pad diameter (mm)");
				dlgCell(6, 2) dlgRealEdit(par_pad_diameter, .1, 10.0);

				dlgCell(7, 1) dlgLabel("via/pad drill (mm)");
				dlgCell(7, 2) dlgRealEdit(par_pad_drill, .1, 10.0);
			}
			dlgStretch(1);
		}
		dlgVBoxLayout {
			dlgGridLayout {
				if (in_board_editor) {
					dlgCell(1, 1) dlgLabel("board padding (mm)");
					dlgCell(1, 2) dlgRealEdit(par_padding, 1, 80.0);
					
					dlgCell(2, 1) dlgLabel("layer");
					dlgCell(2, 2) dlgIntEdit(par_layer, 1, 255);

					dlgCell(3, 1) dlgLabel("add board dimensions");
					dlgCell(3, 2) dlgCheckBox("", par_add_dimensions);
				} else {
					dlgCell(1, 1) dlgLabel("border padding (mm)");
					dlgCell(1, 2) dlgRealEdit(par_padding, 1, 80.0);

					dlgCell(2, 1) dlgLabel("add antenna border");
					dlgCell(2, 2) dlgCheckBox("", par_add_dimensions);
				}
			}
			dlgStretch(1);
		}
  }
  dlgHBoxLayout {
	 dlgPushButton("+&OK")	  { dlgAccept(); doit(); }
	 dlgPushButton("-&Cancel") { dlgReject(); exit(0); }
	 dlgStretch(1);
  }
};


