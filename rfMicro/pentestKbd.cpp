#include "Arduino.h"
#include "pentestKbd.h"

/****************** Keyboard Variables ***********************************************/      
      const int defaultDelay = 4;
      const int defaultCharDelay = 5;
      const int defaultLoadSize = 32; 
      static char OS = 'W';
      
  /****************** kEYBOARD FUNCTIONS ***************************/

void typeKey(int key) {
  Keyboard.press(key);
  delay(defaultCharDelay);
  Keyboard.release(key);
}

void windowsOpen(String app){
      delay(defaultDelay);
      delay(defaultDelay);
      Keyboard.press(KEY_LEFT_GUI);
      Keyboard.press(114);
      Keyboard.releaseAll();

      delay(defaultDelay);
      delay(200);

      delay(defaultDelay);
      Keyboard.print(app);

      delay(defaultDelay);
      typeKey(KEY_RETURN);
      delay(100);
}

void openCMD(char OS) {
  Keyboard.begin();
  delay(500);
  delay(defaultDelay);
  switch (OS) {
    case 'W':
      windowsOpen("cmd");
    case 'L':    // Linux run dialog
      delay(defaultDelay);
      Keyboard.press(KEY_LEFT_ALT);
      Keyboard.press(KEY_F2);
      Keyboard.releaseAll();

      delay(defaultDelay);
      delay(200);
      delay(defaultDelay);
      break;


    case 'M':    // Mac OS run dialog
      delay(defaultDelay);
      Keyboard.press(KEY_LEFT_GUI);
      Keyboard.press(' '); //cmd + N opens new terminal window, cmd + space opens spotlight search
      Keyboard.releaseAll();
      delay(600);
      Keyboard.print("Terminal");
      delay(200);
      typeKey(KEY_RETURN);
      Keyboard.releaseAll();
      delay(defaultDelay);
      delay(200);
      break;
  }

}

String readPayload(byte payload[]){
  String com = String((char*)payload);
  memset(payload, 0, loadSize);
  return com; 
}

char typeCommands(byte payload[]) {

  int i = 0;

  while (com[i] != '\0'){
    if (com[i]=='@'){
      ++i; 
      executeSpecialCommand(com[i]);
      ++i;
    }
    Keyboard.write(com[i]);
    ++i;
  }  
  com = "";
  typeKey(KEY_RETURN);
  Keyboard.releaseAll();
}

void executeSpecialCommand(byte command){
  switch (command)
  {
  case '1'
    openCMD(OS);
    break;
  
  case '2':

    break;
  } 
}

void nrfPen::setOS(char operatingSystem){
  OS = operatingSystem;
}