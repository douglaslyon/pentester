#include <SPI.h>
#include <RF24.h>
#include <printf.h>   // must include this to use radio.printDetails();

#define CE_PIN 8
#define CSN_PIN 7
#define ROLE_PIN 2   //pull this pin to GND for RX 


//NOTE: this ONLY tests rf transmission, delays and for missed packets. It does not include the keyboard functionality 
//(when using the keyboard functionality on reciever side you cannot send packets this fast, keyboard functions need delays and thus more time to execute)

//Serial output is mostly done on tx side, test from there


RF24 radio(CE_PIN, CSN_PIN);
  const byte nodeAddresses[2][6] = { {"Node1"} , {"Node2"} };              // Radio pipe addresses for the 2 nodes to communicate.

              unsigned long sendCount=0;
              unsigned long rxCnt = 0;
              unsigned long failCount=0; 
              const uint8_t channel = 0x76;
              const int loadSize = 16;
              byte inload[loadSize];
              byte outload[]= {"Hello there"} ; //random array of bytes for testing why not
              int role =1;
              uint32_t configTimer = millis();
              byte ack = '1';

void transmitData(){
  char gotAck;
  unsigned long startTime = micros();
  radio.stopListening();
  bool tx_sent = radio.write(&outload, sizeof(outload));
      if (tx_sent) {
        radio.startListening();
        if (radio.isAckPayloadAvailable()) {
          radio.read(&gotAck, sizeof(gotAck));         // read ack payload and copy data to relevant remoteNodeData array  
                int tripTime = micros()-startTime;         
                printf("Sent packet %d || round trip (uS) %d \n", sendCount, tripTime);            
                printf("[+] Acknowledgement Recieved");
                sendCount++;
       } else Serial.println("No Ack payload recieved");
     } else {
            Serial.println("[-] The transmission failed.");
            if (sendCount != 0 ) {failCount++;}
     }
}

void readAndReply() {
  
  // check for radio message and send confirm using auto-ack, note you do not need to close your reading pipe/open writing to send an ack
  if ( radio.available() > 0) {
    radio.read( &inload, sizeof(inload) );
    if (inload){ 
      printf("Package #%d received\n", rxCnt);
      rxCnt++;
    } else { Serial.println("RX packet loss");}
  }
}

void radioConnect(){
  printf_begin();                               // This is for initializing printf that is used by printDetails()
  radio.begin();                           //turn on radio
  
  
  radio.setPALevel(RF24_PA_LOW);           // RF24_PA_MIN ,RF24_PA_LOW, RF24_PA_HIGH, RF24_PA_MAX (default)
  //NOTE: the rfMicro can handle up to PA_HIGH but more power is NOT always better, if your devices are in close proximity, transmission will fail if you set this too high regardless of whether the micro is actually supplying the needed power
  
  radio.setDataRate( RF24_1MBPS );      // RF24_250KBPS, RF24_1MBPS, RF24_2MBPS NOTE: NRF24L01 does not support 250KBPS, only the NRF24(+) does that, all the ones we have are (+) modules except some of the rf micros
  radio.setChannel(channel);        //channel and address are not the same!!! Channel is 1MHz bands from 2.4-2.56GHz
  radio.enableAckPayload();               // Allow optional ack payloads
  radio.setRetries(10,10);                 // Smallest time between retries, max no. of retries
  //while(!Serial);             


  if (role==1){        
    radio.openWritingPipe(nodeAddresses[1]);   //this nodes writing pipe corresponds to the other nodes reading pipe!
    radio.openReadingPipe(1,nodeAddresses[0]);    //same with reading pipe
    Serial.println("TRANSMITTER");
  } else { 
    radio.openWritingPipe(nodeAddresses[0]);   //this nodes writing pipe corresponds to the other nodes reading pipe!
    radio.openReadingPipe(1,nodeAddresses[1]);    //same with reading pipe  
    radio.startListening();
    Serial.println("RECEIVER");
    radio.writeAckPayload(1, &ack, sizeof(ack));
  }


  radio.printDetails();       //radio configuration, need to uncomment printf.begin() in setup as well

}

void checkForRadioFail(){
    if(radio.failureDetected){
    radio.failureDetected = false;
    delay(250);
    Serial.println("Radio failure detected, restarting radio");
    radioConnect();        
  }
  //Every 5 seconds, verify the configuration of the radio. This can be done using any 
  //setting that is different from the radio defaults.
  if(millis() - configTimer > 5000){
    configTimer = millis();
    if(radio.getDataRate() != RF24_1MBPS){
      radio.failureDetected = true;
      Serial.print("Radio configuration error detected");
    }
  }
}

void setup(){
  pinMode(ROLE_PIN, INPUT);
  digitalWrite(ROLE_PIN, HIGH);
  if (digitalRead(ROLE_PIN)){role=0;}
  
  Serial.begin(115200);
  radioConnect();                   
  Serial.println("connecting................");
  Serial.println("--------------------------------------------------------"); 
}   

                                                                                               

void loop() {
      if (role==1){
        transmitData();
        //Serial.println(String((char*)outload));
        Serial.println("--------------------------------------------------------");
        delay(500);
      } else {
        readAndReply();
        radio.writeAckPayload(1, &ack, sizeof(ack));
      }
      checkForRadioFail();
}  
