#include <SPI.h>
#include <RF24.h>
#include "printf.h"   // must include this to use radio.printDetails();
#include "nrfPen.h"

#define CE_PIN 8
#define CSN_PIN 7


//NOTE: this ONLY tests rf transmission, delays and for missed packets. It does not include the keyboard functionality 
//(when using the keyboard functionality on reciever side you cannot send packets fast, keyboard functions need delays and thus more time to execute)



RF24 radio(CE_PIN, CSN_PIN);
nrfPen pentester(&radio);

              unsigned long sendCount=0;
              unsigned long rxCnt = 0;
              unsigned long failCount=0; 
              const int loadSize = 16;
              byte inload[loadSize];
              byte outload[]= {"Hello there"} ; //random array of bytes for testing why not
              
             


  /****************** Radio send and recieve ***************************/
void transmitData(){
  char gotAck;
  unsigned long startTime = micros();
  radio.stopListening();
  bool tx_sent = radio.write(&outload, sizeof(outload));
      if (tx_sent) {
        radio.startListening();
        if (radio.isAckPayloadAvailable()) {
          radio.read(&gotAck, sizeof(gotAck));         // read ack payload and copy data   
                int tripTime = micros()-startTime;      
                sendCount++;   
                printf("Sent packet %d || round trip (uS) %d \n", sendCount, tripTime);            
                printf("[+] Acknowledgement Recieved");
       } else Serial.println("No Ack payload recieved");
     } else {
            Serial.println("[-] The transmission failed.");
            if (sendCount != 0 ) {failCount++;}
     }
}

void readAndReply() {
  
  // check for radio message and send confirm using auto-ack, note you do not need to close your reading pipe/open writing to send an ack
  while ( radio.available() > 0) {
    radio.read( &inload, sizeof(inload) );
    radio.writeAckPayload(1, DEF_ACK, sizeof(DEF_ACK));
    if (inload[0]>0){ 
      rxCnt++;
      printf("Package #%d received\n", rxCnt);
    } else { Serial.println("RX packet loss");}
  }
}


  /****************** Main ***************************/
void setup(){
  Serial.begin(115200);
  printf_begin();
  pentester.init();
  pentester.checkRole();
  radio.printDetails();       //node configuration, need  printf                   
  printf("\t........connecting........\n--------------------------------------------------------\n");
  printf("***PRESS 'T' TO BEGIN TRANSMITTING***\n");
}   

                                                                                               
void loop() {
  int myRole = pentester.getRole();
      if (myRole==1){
        transmitData();
        Serial.println("--------------------------------------------------------");
        delay(300);
      } else {
        readAndReply();
        
      }
      pentester.checkForRadioFail();
      if (sendCount % 50 == 0 && sendCount > 1){printf("\t-------\nThere have been %d failures out of %d transmissions\n\t-------\n", failCount, sendCount);}  //Every 50 transmissions, print the number of failures
      pentester.checkRole();
}  
